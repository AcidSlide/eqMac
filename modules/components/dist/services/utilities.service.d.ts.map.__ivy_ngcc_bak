{"version":3,"file":"utilities.service.d.ts","sources":["utilities.service.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["export declare class UtilitiesService {\n    mapValue(value: number, inMin: number, inMax: number, outMin: number, outMax: number): number;\n    logMapValue({ value, inMin, inMax, outMin, outMax }: {\n        value: number;\n        inMin: number;\n        inMax: number;\n        outMin: number;\n        outMax: number;\n    }): number;\n    logMapValueInverse({ value, inMin, inMax, outMin, outMax }: {\n        value: number;\n        inMin: number;\n        inMax: number;\n        outMin: number;\n        outMax: number;\n    }): number;\n    getImageFromSrcWhenLoaded(src: string): Promise<HTMLImageElement>;\n    getBackgroundImageSrcFromClass(className: string): string;\n    getImageFromClassBackgroundImageSrcWhenLoaded(className: string): Promise<HTMLImageElement>;\n    getRandomFloatInRange(min: number, max: number): number;\n    getCoordinatesInsideElementFromEvent(event: MouseEvent, element?: HTMLElement): {\n        x: number;\n        y: number;\n    };\n    delay(ms: number): Promise<unknown>;\n    getElementPosition(el: HTMLElement): {\n        y: number;\n        x: number;\n    };\n    hexToRgb(hex: string): {\n        b: any;\n        r: any;\n        g: any;\n    };\n    rgbToHex({ r, g, b }: {\n        r: number;\n        g: number;\n        b: number;\n    }): string;\n}\n"]}