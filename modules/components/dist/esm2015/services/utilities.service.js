import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class UtilitiesService {
    mapValue(value, inMin, inMax, outMin, outMax) {
        return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
    }
    logMapValue({ value, inMin, inMax, outMin, outMax }) {
        outMin = Math.log(outMin);
        outMax = Math.log(outMax);
        const scale = (outMax - outMin) / (inMax - inMin);
        return Math.exp(outMin + scale * (value - inMin));
    }
    logMapValueInverse({ value, inMin, inMax, outMin, outMax }) {
        inMin = Math.log(inMin || 1);
        inMax = Math.log(inMax);
        outMin = outMin || 1;
        const scale = (inMax - inMin) / (outMax - outMin);
        const result = (Math.log(value) - inMin) / scale + outMin;
        return result;
    }
    getImageFromSrcWhenLoaded(src) {
        return new Promise((resolve, reject) => {
            const image = new Image();
            image.crossOrigin = 'anonymous'; // This enables CORS
            image.onload = () => resolve(image);
            image.onerror = () => reject(image);
            image.src = src;
        });
    }
    getBackgroundImageSrcFromClass(className) {
        var _a;
        const div = document.createElement('div');
        div.className = className;
        document.getElementsByTagName('body')[0].appendChild(div);
        const style = window.getComputedStyle(div);
        const src = style.backgroundImage.slice(4, style.backgroundImage.length - 1).replace(/"/g, '');
        (_a = div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(div);
        return src;
    }
    getImageFromClassBackgroundImageSrcWhenLoaded(className) {
        return this.getImageFromSrcWhenLoaded(this.getBackgroundImageSrcFromClass(className));
    }
    getRandomFloatInRange(min, max) {
        return (Math.random() * (max - min) + min);
    }
    getCoordinatesInsideElementFromEvent(event, element) {
        const el = element || event.target;
        const rect = el.getBoundingClientRect();
        return {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        };
    }
    delay(ms) {
        return new Promise(resolve => {
            setTimeout(resolve, ms);
        });
    }
    getElementPosition(el) {
        const rect = el.getBoundingClientRect();
        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        return { y: rect.top + scrollTop, x: rect.left + scrollLeft };
    }
    hexToRgb(hex) {
        const result = /^#?([a-f\d]{1,2})([a-f\d]{1,2})([a-f\d]{1,2})$/i.exec(hex);
        if (result) {
            const rgb = {
                r: result[1],
                g: result[2],
                b: result[3]
            };
            for (const [color, hex] of Object.entries(rgb)) {
                if (hex.length < 2)
                    rgb[color] = `${hex}${hex}`;
                rgb[color] = parseInt(rgb[color], 16);
            }
            return rgb;
        }
        else {
            return { r: 0, g: 0, b: 0 };
        }
    }
    rgbToHex({ r, g, b }) {
        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }
}
UtilitiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UtilitiesService_Factory() { return new UtilitiesService(); }, token: UtilitiesService, providedIn: "root" });
UtilitiesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,