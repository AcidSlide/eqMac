import { Component, ViewChild, Input } from '@angular/core';
export class LoadingComponent {
    constructor() {
        this.showText = true;
    }
    ngAfterViewInit() {
        const path = this.wave.nativeElement;
        // eslint-disable-next-line no-loss-of-precision
        const m = 0.512286623256592433;
        const w = 90;
        const h = 60;
        const a = h / 4;
        const y = h / 2;
        const pathData = [
            'M', w * 0, y + a / 2,
            'c', a * m, 0, -(1 - a) * m, -a, a, -a,
            's', -(1 - a) * m, a, a, a,
            's', -(1 - a) * m, -a, a, -a,
            's', -(1 - a) * m, a, a, a,
            's', -(1 - a) * m, -a, a, -a,
            's', -(1 - a) * m, a, a, a,
            's', -(1 - a) * m, -a, a, -a,
            's', -(1 - a) * m, a, a, a,
            's', -(1 - a) * m, -a, a, -a,
            's', -(1 - a) * m, a, a, a,
            's', -(1 - a) * m, -a, a, -a,
            's', -(1 - a) * m, a, a, a,
            's', -(1 - a) * m, -a, a, -a,
            's', -(1 - a) * m, a, a, a,
            's', -(1 - a) * m, -a, a, -a
        ].join(' ');
        path.setAttribute('d', pathData);
    }
}
LoadingComponent.decorators = [
    { type: Component, args: [{
                selector: 'eqm-loading',
                template: "<div class=\"loader\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" \n      width=\"80px\" height=\"60px\"\n      viewBox=\"5 0 80 60\">\n    <path id=\"wave\" #wave\n        fill=\"none\" \n        stroke=\"#4f8d71\" \n        stroke-width=\"4\"\n        stroke-linecap=\"round\">\n    </path>\n  </svg>\n</div>\n<eqm-label *ngIf=\"showText\">{{text || 'Loading'}}</eqm-label>",
                styles: [":host{display:flex;flex-direction:column;justify-content:center;align-items:center}.loader{height:60px;width:80px}.loader #wave{stroke-dasharray:0 16 101 16;-webkit-animation:animateWave 2.4s linear infinite;animation:animateWave 2.4s linear infinite}@-webkit-keyframes animateWave{0%{stroke-dashoffset:0;transform:translateZ(0)}to{stroke-dashoffset:-133;transform:translate3d(-90px,0,0)}}@keyframes animateWave{0%{stroke-dashoffset:0;transform:translateZ(0)}to{stroke-dashoffset:-133;transform:translate3d(-90px,0,0)}}"]
            },] }
];
LoadingComponent.propDecorators = {
    wave: [{ type: ViewChild, args: ['wave', { static: true },] }],
    text: [{ type: Input }],
    showText: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBwL2NvbXBvbmVudHMvY29tcG9uZW50cy9sb2FkaW5nL2xvYWRpbmcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUE2QixLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFPdEYsTUFBTSxPQUFPLGdCQUFnQjtJQUw3QjtRQVFXLGFBQVEsR0FBRyxJQUFJLENBQUE7SUFpQzFCLENBQUM7SUEvQkMsZUFBZTtRQUNiLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFBO1FBQ3BDLGdEQUFnRDtRQUNoRCxNQUFNLENBQUMsR0FBRyxvQkFBb0IsQ0FBQTtRQUM5QixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDWixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUE7UUFFWixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUVmLE1BQU0sUUFBUSxHQUFHO1lBQ2YsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3JCLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDMUIsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUIsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUMxQixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQzFCLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDMUIsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUIsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUMxQixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQzFCLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDMUIsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDN0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFWCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNsQyxDQUFDOzs7WUF4Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixxWUFBdUM7O2FBRXhDOzs7bUJBRUUsU0FBUyxTQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7bUJBQ2xDLEtBQUs7dUJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2VxbS1sb2FkaW5nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xvYWRpbmcuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4vbG9hZGluZy5jb21wb25lbnQuc2NzcycgXVxufSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBWaWV3Q2hpbGQoJ3dhdmUnLCB7IHN0YXRpYzogdHJ1ZSB9KSB3YXZlITogRWxlbWVudFJlZlxuICBASW5wdXQoKSB0ZXh0Pzogc3RyaW5nXG4gIEBJbnB1dCgpIHNob3dUZXh0ID0gdHJ1ZVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCAoKSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMud2F2ZS5uYXRpdmVFbGVtZW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvc3Mtb2YtcHJlY2lzaW9uXG4gICAgY29uc3QgbSA9IDAuNTEyMjg2NjIzMjU2NTkyNDMzXG4gICAgY29uc3QgdyA9IDkwXG4gICAgY29uc3QgaCA9IDYwXG5cbiAgICBjb25zdCBhID0gaCAvIDRcbiAgICBjb25zdCB5ID0gaCAvIDJcblxuICAgIGNvbnN0IHBhdGhEYXRhID0gW1xuICAgICAgJ00nLCB3ICogMCwgeSArIGEgLyAyLFxuICAgICAgJ2MnLCBhICogbSwgMCwgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWEsXG4gICAgICAncycsIC0oMSAtIGEpICogbSwgYSwgYSwgYSxcbiAgICAgICdzJywgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWEsXG4gICAgICAncycsIC0oMSAtIGEpICogbSwgYSwgYSwgYSxcbiAgICAgICdzJywgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWEsXG4gICAgICAncycsIC0oMSAtIGEpICogbSwgYSwgYSwgYSxcbiAgICAgICdzJywgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWEsXG4gICAgICAncycsIC0oMSAtIGEpICogbSwgYSwgYSwgYSxcbiAgICAgICdzJywgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWEsXG4gICAgICAncycsIC0oMSAtIGEpICogbSwgYSwgYSwgYSxcbiAgICAgICdzJywgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWEsXG4gICAgICAncycsIC0oMSAtIGEpICogbSwgYSwgYSwgYSxcbiAgICAgICdzJywgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWEsXG4gICAgICAncycsIC0oMSAtIGEpICogbSwgYSwgYSwgYSxcbiAgICAgICdzJywgLSgxIC0gYSkgKiBtLCAtYSwgYSwgLWFcbiAgICBdLmpvaW4oJyAnKVxuXG4gICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBwYXRoRGF0YSlcbiAgfVxufVxuIl19