{"version":3,"file":"flat-slider.component.d.ts","sources":["flat-slider.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef } from '@angular/core';\nimport { UtilitiesService } from '../../services/utilities.service';\nimport { DomSanitizer } from '@angular/platform-browser';\nexport interface FlatSliderValueChangedEvent {\n    value: number;\n    transition?: boolean;\n}\nexport declare class FlatSliderComponent {\n    utils: UtilitiesService;\n    elem: ElementRef;\n    sanitizer: DomSanitizer;\n    constructor(utils: UtilitiesService, elem: ElementRef, sanitizer: DomSanitizer);\n    scale: 'logarithmic' | 'linear';\n    doubleClickToAnimateToMiddle: boolean;\n    showMiddleNotch: boolean;\n    min: number;\n    max: number;\n    animationDuration: number;\n    animationFps: number;\n    scrollEnabled: boolean;\n    middle?: number;\n    stickToMiddle: boolean;\n    thickness: number;\n    orientation: 'vertical' | 'horizontal';\n    stickedToMiddle: EventEmitter<any>;\n    containerRef: ElementRef;\n    get middleValue(): number;\n    defaultColor: string;\n    _enabled: boolean;\n    get disabled(): boolean;\n    set enabled(shouldBeEnabled: boolean);\n    get enabled(): boolean;\n    _color: string;\n    set color(newColor: string);\n    get color(): string;\n    get darkerColor(): string;\n    dragging: boolean;\n    thumbRadius: number;\n    _value: number;\n    set value(newValue: number);\n    get value(): number;\n    valueChange: EventEmitter<any>;\n    userChangedValue: EventEmitter<FlatSliderValueChangedEvent>;\n    get height(): any;\n    get width(): any;\n    clampValue(value: number): number;\n    mouseWheel(event: WheelEvent): void;\n    getValueFromMouseEvent(event: MouseEvent): number;\n    mousedown(event: MouseEvent): void;\n    mousemove(event: MouseEvent): void;\n    mouseInside: boolean;\n    onMouseEnter(): void;\n    onMouseLeave(): void;\n    doubleclickTimeout?: number;\n    doubleclick(): void;\n    animateSlider(from: number, to: number): Promise<void>;\n    onMouseUp(event: MouseEvent): void;\n    mouseup(event: MouseEvent): void;\n    get progress(): number;\n    get containerStyle(): {\n        [style: string]: string;\n    };\n    get grooveStyle(): {\n        [style: string]: string | number;\n    };\n    get grooveFillingStyle(): {\n        [style: string]: string;\n    };\n    get thumbNotchStyle(): {\n        [style: string]: string | number;\n    };\n    get thumbStyle(): {\n        [style: string]: string | number;\n    };\n    private mapValue;\n}\n"]}