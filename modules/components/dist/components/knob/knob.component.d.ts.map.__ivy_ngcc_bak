{"version":3,"file":"knob.component.d.ts","sources":["knob.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, EventEmitter, ElementRef } from '@angular/core';\nimport { UtilitiesService } from '../../services/utilities.service';\nexport interface KnobValueChangedEvent {\n    value: number;\n    transition?: boolean;\n}\nexport declare class KnobComponent implements OnInit {\n    utils: UtilitiesService;\n    size: 'large' | 'medium' | 'small';\n    showScale: boolean;\n    _min: number;\n    set min(newMin: number);\n    get min(): number;\n    _max: number;\n    set max(newMax: number);\n    get max(): number;\n    disabled: boolean;\n    doubleClickToAnimateToMiddle: boolean;\n    animationDuration: number;\n    animationFps: number;\n    animatingToMiddle: EventEmitter<any>;\n    stickToMiddle: boolean;\n    stickedToMiddle: EventEmitter<any>;\n    dragging: boolean;\n    setDraggingFalseTimeout: any;\n    continueAnimation: boolean;\n    dragStartDegr: number;\n    containerRef: ElementRef;\n    container: HTMLDivElement;\n    _value: number;\n    valueChange: EventEmitter<number>;\n    userChangedValue: EventEmitter<KnobValueChangedEvent>;\n    set value(newValue: number);\n    get value(): number;\n    middleValue: number;\n    calculateMiddleValue(): number;\n    constructor(utils: UtilitiesService);\n    ngOnInit(): Promise<void>;\n    mouseWheel(event: WheelEvent): void;\n    mousedown(event: MouseEvent): void;\n    onMouseLeave(): void;\n    onGestureChange(event: any): void;\n    mousemove(event: MouseEvent): void;\n    mouseup(event: MouseEvent): void;\n    doubleclick(): void;\n    largeCapMaxAngle: number;\n    get largeCapClipPathStyle(): {\n        transform: string;\n        'transform-origin': string;\n    };\n    get largeCapIndicatorStyle(): {\n        transform: string;\n    };\n    get largeCapBodyStyle(): {};\n    mediumCapMaxAngle: number;\n    get mediumCapIndicatorStyle(): {\n        transform: string;\n    };\n    smallCapMaxAngle: number;\n    get smallCapIndicatorStyle(): {\n        transform: string;\n    };\n    animateKnob(from: number, to: number): Promise<void>;\n    getDegreesFromEvent(event: MouseEvent): number;\n    getDistanceFromCenterOfElementAndEvent(event: MouseEvent): number;\n    clampValue(value: number): number;\n}\n"]}